package com.sythealth.fitness.service;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.io.IOUtils;

import android.content.Context;
import android.telephony.TelephonyManager;
import android.util.Log;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.sythealth.fitness.db.CommonDBOpenHelper;
import com.sythealth.fitness.db.UserModel;

public class ServiceImpl {

	private static final String LOG_TAG = "ServiceImpl";

	private IDBService dbService;
	private IRemoteService remoteService;
	private UserModel currentUser;
	private Context context;
	
	private ObjectMapper mapper;

	private static ServiceImpl instance;

	public static ServiceImpl getInstance(Context context) {
		if (instance == null) {
			initDBFile(context);
			
			instance = new ServiceImpl(context);
		}
		if (instance.remoteService == null) {
			instance.remoteService = RemoteServiceImpl.getInstance();
		}
		return instance;
	}
	
	private static void initDBFile(Context context) {
		File dbfile = context.getDatabasePath(CommonDBOpenHelper.DATABASE_NAME);
		// judge if there exists the db file
		if (!dbfile.exists()) {
			// no db file then copy init db file from assets
			InputStream in = null;
			try {
				in = context.getAssets().open(CommonDBOpenHelper.DATABASE_NAME);
				if (in != null) {
					dbfile.getParentFile().mkdirs();
					FileOutputStream writer =  new FileOutputStream(dbfile);
					IOUtils.write(IOUtils.toByteArray(in), writer);
				}
			} catch (Exception e) {
				Log.e(LOG_TAG , "copy init db exception:" + e.getMessage());
			}
		}
	}

	private ServiceImpl(Context context) {
		this.context = context;
		this.dbService = DBServiceImpl.getInstance(context);
		this.remoteService = RemoteServiceImpl.getInstance();
		
		this.mapper = new ObjectMapper();
		
		TelephonyManager manager = (TelephonyManager) context
				.getSystemService(Context.TELEPHONY_SERVICE);
		String sid = manager.getDeviceId();
		
		this.remoteService.setSid(sid);
	}

	public IDBService getDbService() {
		if (dbService == null) {
			dbService = DBServiceImpl.getInstance(context);
		}
		dbService.setCurrentUser(currentUser);
		return dbService;
	}

	private void setCurrentUser(UserModel currentUser) {
		this.currentUser = currentUser;
		this.dbService.setCurrentUser(currentUser);
	}

	/********** Remote Services ****************/
	public MessageModel<UserModel> loginByEmail(String email, String password) {
		MessageModel<UserModel> msg = new MessageModel<UserModel>();
		try {
			UserModel user = remoteService.login("", email, password);

			// save user into db
			if (!getDbService().createUser(user)) {
				msg.setFlag(false);
				msg.setErrorCode(ServiceException.ERROR_CODE_DB_EXCEPTION);
				return msg;
			}
			setCurrentUser(user);
			msg.setData(user);
			msg.setFlag(true);
		} catch (ServiceException e) {
			Log.e(LOG_TAG, "loginDirect error:" + e.getMessage());
			msg.setErrorCode(e.getErrorCode());
			msg.setMessage(e.getMessage());
		}
		return msg;
	}

	public MessageModel<UserModel> loginByPhone(String phone, String password) {

		MessageModel<UserModel> msg = new MessageModel<UserModel>();
		try {
			UserModel user = remoteService.login(phone, "", password);

			// save user into db
			if (!getDbService().createUser(user)) {
				msg.setFlag(false);
				msg.setErrorCode(ServiceException.ERROR_CODE_DB_EXCEPTION);
				return msg;
			}

			setCurrentUser(user);
			msg.setData(user);
			msg.setFlag(true);
		} catch (ServiceException e) {
			Log.e(LOG_TAG, "loginDirect error:" + e.getMessage());
			msg.setErrorCode(e.getErrorCode());
			msg.setMessage(e.getMessage());
		}
		return msg;
	}

	public MessageModel<String> forgetPasswordByEmail(String email) {
		MessageModel<String> msg = new MessageModel<String>();
		try {
			return remoteService.forgetPassword("", email);
		} catch (ServiceException e) {
			Log.e(LOG_TAG, "loginDirect error:" + e.getMessage());
			msg.setErrorCode(e.getErrorCode());
			msg.setMessage(e.getMessage());
		}
		return msg;
	}

	public MessageModel<String> forgetPasswordByPhone(String phone) {
		MessageModel<String> msg = new MessageModel<String>();
		try {
			return remoteService.forgetPassword(phone, "");
		} catch (ServiceException e) {
			Log.e(LOG_TAG, "loginDirect error:" + e.getMessage());
			msg.setErrorCode(e.getErrorCode());
			msg.setMessage(e.getMessage());
		}
		return msg;
	}

	public MessageModel<String> register(UserModel user) {
		MessageModel<String> msg = new MessageModel<String>();
		/**
		 * // 1.check duplicated user if (user.getEmail() != null) { if
		 * (dbService.queryUserByEmail(user.getEmail()) != null) {
		 * message.setMessage("Duplicated user's e-mail:" + user.getEmail());
		 * return message; } }
		 * 
		 * if (user.getPhoneNumber() != null) { if
		 * (dbService.queryUserByEmail(user.getPhoneNumber()) != null) {
		 * message.setMessage("Duplicated user's phone number:" +
		 * user.getPhoneNumber()); return message; } }
		 * 
		 * // 2.insert a user record if (dbService.createUser(user)) {
		 * 
		 * message.setFlag(true); } else {
		 * message.setMessage("insert sql error"); }
		 **/
		try {
			msg = remoteService.register(user);

			if (msg.isFlag()) {
				// save user into db

				if (!getDbService().createUser(user)) {
					msg.setFlag(false);
					msg.setErrorCode(ServiceException.ERROR_CODE_DB_EXCEPTION);
					return msg;
				}

				msg.setFlag(true);
			}
		} catch (ServiceException e) {
			Log.e(LOG_TAG, "loginDirect error:" + e.getMessage());
			msg.setErrorCode(e.getErrorCode());
			msg.setMessage(e.getMessage());
		}

		return msg;
	}

	public void close() {
		if (dbService != null) {
			dbService.close();
			dbService = null;
		}
	}

	public MessageModel<UserModel> loginDirect(String sid) {
		MessageModel<UserModel> msg = new MessageModel<UserModel>();
		try {
			UserModel user = remoteService.loginDirect(sid);

			// query user from local db
			UserModel user2 = getDbService().queryUserBySid(sid);
			if (user2 == null) {
				// save user into db
				if (!getDbService().createUser(user)) {
					msg.setFlag(false);
					msg.setErrorCode(ServiceException.ERROR_CODE_DB_EXCEPTION);
					return msg;
				} else {
					user = getDbService().queryUserBySid(sid);
				}
			} else {
				user = user2;
			}

			setCurrentUser(user);
			msg.setData(user);
			msg.setFlag(true);
		} catch (ServiceException e) {
			Log.e(LOG_TAG, "loginDirect error:" + e.getMessage());
			msg.setErrorCode(e.getErrorCode());
			msg.setMessage(e.getMessage());
		}
		return msg;
	}


	public void setURL(String url) {
		remoteService.setBaseUrl(url);
	}

	public String getURL() {
		return remoteService.getBaseUrl();
	}

	public UserModel getCurrentUser() {
		return currentUser;
	}


}

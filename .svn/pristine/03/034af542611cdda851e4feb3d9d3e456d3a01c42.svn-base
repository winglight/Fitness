package com.sythealth.fitness.service;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.commons.io.IOUtils;

import android.content.Context;
import android.os.AsyncTask;
import android.os.Handler;
import android.os.Message;
import android.telephony.TelephonyManager;
import android.util.Log;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.sythealth.fitness.db.DiaryModel;
import com.sythealth.fitness.db.MedalModel;
import com.sythealth.fitness.db.RemoteInvokeModel;
import com.sythealth.fitness.db.UserModel;
import com.sythealth.fitness.db.WeightModel;
import com.sythealth.fitness.db.enumetype.RemoteInvokeStatus;
import com.sythealth.fitness.json.LoginToken;
import com.sythealth.fitness.json.Return;

public class ServiceImpl {

	private static final String LOG_TAG = "ServiceImpl";

	private IDBService dbService;
	private IRemoteService remoteService;
	private UserModel currentUser;
	private Context context;

	private ObjectMapper mapper;

	private static ServiceImpl instance;

	public static ServiceImpl getInstance(Context context) {
		if (instance == null) {
//			initDBFile(context);

			instance = new ServiceImpl(context);
		}
		if (instance.remoteService == null) {
			instance.remoteService = RemoteServiceImpl.getInstance();
		}
		return instance;
	}

//	private static void initDBFile(Context context) {
//		File dbfile = context.getDatabasePath(CommonDBOpenHelper.DATABASE_NAME);
//		// judge if there exists the db file
//		if (!dbfile.exists()) {
//			// no db file then copy init db file from assets
//			InputStream in = null;
//			try {
//				in = context.getAssets().open(CommonDBOpenHelper.DATABASE_NAME);
//				if (in != null) {
//					dbfile.getParentFile().mkdirs();
//					FileOutputStream writer = new FileOutputStream(dbfile);
//					IOUtils.write(IOUtils.toByteArray(in), writer);
//				}
//			} catch (Exception e) {
//				Log.e(LOG_TAG, "copy init db exception:" + e.getMessage());
//			}
//		}
//	}

	private ServiceImpl(Context context) {
		this.context = context;
		this.dbService = DBServiceImpl.getInstance(context);
		this.remoteService = RemoteServiceImpl.getInstance();

		this.mapper = new ObjectMapper();

		TelephonyManager manager = (TelephonyManager) context
				.getSystemService(Context.TELEPHONY_SERVICE);
		String sid = manager.getDeviceId();

		this.remoteService.setSid(sid);
	}

	private IDBService getDbService() {
		if (dbService == null) {
			dbService = DBServiceImpl.getInstance(context);
		}
		dbService.setCurrentUser(currentUser);
		return dbService;
	}

	private void setCurrentUser(UserModel currentUser) {
		this.currentUser = currentUser;
		this.dbService.setCurrentUser(currentUser);
	}

	/********** 同步方法-远程 ****************/
	public UserModel getCurrentUser() {
		if (currentUser == null) {
			currentUser = getDbService().queryDefaultUser();
		}
		return currentUser;
	}

	public boolean createUser(UserModel user) {
		return getDbService().createUser(user);
	}

	public MessageModel<UserModel> loginByEmail(String email, String password) {
		MessageModel<UserModel> msg = new MessageModel<UserModel>();
		try {
			UserModel user = remoteService.login("", email, password);

			// save user into db
			if (!getDbService().createUser(user)) {
				msg.setFlag(false);
				msg.setErrorCode(ServiceException.ERROR_CODE_DB_EXCEPTION);
				return msg;
			}
			setCurrentUser(user);
			msg.setData(user);
			msg.setFlag(true);
		} catch (ServiceException e) {
			Log.e(LOG_TAG, "loginDirect error:" + e.getMessage());
			msg.setErrorCode(e.getErrorCode());
			msg.setMessage(e.getMessage());
		}
		return msg;
	}

	public MessageModel<UserModel> loginByPhone(String phone, String password) {

		MessageModel<UserModel> msg = new MessageModel<UserModel>();
		try {
			UserModel user = remoteService.login(phone, "", password);

			// save user into db
			if (!getDbService().createUser(user)) {
				msg.setFlag(false);
				msg.setErrorCode(ServiceException.ERROR_CODE_DB_EXCEPTION);
				return msg;
			}

			setCurrentUser(user);
			msg.setData(user);
			msg.setFlag(true);
		} catch (ServiceException e) {
			Log.e(LOG_TAG, "loginDirect error:" + e.getMessage());
			msg.setErrorCode(e.getErrorCode());
			msg.setMessage(e.getMessage());
		}
		return msg;
	}

	public MessageModel<String> forgetPasswordByEmail(String email) {
		MessageModel<String> msg = new MessageModel<String>();
		try {
			return remoteService.forgetPassword("", email);
		} catch (ServiceException e) {
			Log.e(LOG_TAG, "loginDirect error:" + e.getMessage());
			msg.setErrorCode(e.getErrorCode());
			msg.setMessage(e.getMessage());
		}
		return msg;
	}

	public MessageModel<String> forgetPasswordByPhone(String phone) {
		MessageModel<String> msg = new MessageModel<String>();
		try {
			return remoteService.forgetPassword(phone, "");
		} catch (ServiceException e) {
			Log.e(LOG_TAG, "loginDirect error:" + e.getMessage());
			msg.setErrorCode(e.getErrorCode());
			msg.setMessage(e.getMessage());
		}
		return msg;
	}

	public MessageModel<String> register(UserModel user) {
		MessageModel<String> msg = new MessageModel<String>();
		try {
			msg = remoteService.register(user);

			if (msg.isFlag()) {
				// save user into db

				if (!getDbService().createUser(user)) {
					msg.setFlag(false);
					msg.setErrorCode(ServiceException.ERROR_CODE_DB_EXCEPTION);
					return msg;
				}

				msg.setFlag(true);
			}
		} catch (ServiceException e) {
			Log.e(LOG_TAG, "loginDirect error:" + e.getMessage());
			msg.setErrorCode(e.getErrorCode());
			msg.setMessage(e.getMessage());
		}

		return msg;
	}

	public MessageModel<UserModel> loginDirect(String sid) {
		MessageModel<UserModel> msg = new MessageModel<UserModel>();
		try {
			UserModel user = remoteService.loginDirect(sid);

			// query user from local db
			UserModel user2 = getDbService().queryUserBySid(sid);
			if (user2 == null) {
				// save user into db
				if (!getDbService().createUser(user)) {
					msg.setFlag(false);
					msg.setErrorCode(ServiceException.ERROR_CODE_DB_EXCEPTION);
					return msg;
				} else {
					user = getDbService().queryUserBySid(sid);
				}
			} else {
				user = user2;
			}

			setCurrentUser(user);
			msg.setData(user);
			msg.setFlag(true);
		} catch (ServiceException e) {
			Log.e(LOG_TAG, "loginDirect error:" + e.getMessage());
			msg.setErrorCode(e.getErrorCode());
			msg.setMessage(e.getMessage());
		}
		return msg;
	}
	
	/********** 同步方法-本地 ****************/
	/**
	 * 创建新的体重记录
	 * @param weight
	 */
	public void createWeightRecord(WeightModel weight){
		//1.save local
		getDbService().createWeightRecord(weight);
		//2.save User info
		currentUser.setCurrentWeight(weight.getWeight());
		currentUser.refresh();
		getDbService().updateUser(currentUser);
		//3.push to server
		RemoteInvokeModel rim = new RemoteInvokeModel();
		//TODO:add params for RPC
		
		pushData2Server(rim);
	}
	
	/**
	 * 创建新的日记
	 * @param diary
	 */
	public void createDiaryRecord(DiaryModel diary){
		//1.save local
		getDbService().createDiaryRecord(diary);
		//2.push to server
		RemoteInvokeModel rim = new RemoteInvokeModel();
		//TODO:add params for RPC
		
		pushData2Server(rim);
	}
	
	/**
	 * 局部运动完成后检查是否获得勋章(还未获得的勋章)，是返回勋章，否返回null
	 * @return
	 */
	public MedalModel checkCountSportAchievement(){
		return null;
	}
	
	/**
	 * 记录计数运动完成后的金币、经验、消耗热量，并保存到用户及今日战绩中，勋章中增加一次计数
	 * @param times 运动次数
	 * @param standardCals 标准消耗热量（千卡/公斤*次）
	 * @return
	 */
	public UserModel saveCountSportRecord(int times, int standardCals){
		//1.计算金币、经验、消耗热量，并保存
		//2.
		//
		//
		return null;
	}

	/********** 异步方法/代发消息 ****************/
	// 同步用户基本信息
	public void syncUserBaseInfo() {

	}

	// 获取某个用户公开数据
	public void getUserBaseInfoById(final Handler handler, String uid) {
		RemoteInvokeModel rim = new RemoteInvokeModel();
		//TODO:add params for RPC
		new MyQueryTask<UserModel>(handler, rim).execute(this);
	}
	
	// 获取个人主页访客列表
		public void getVisitors(final Handler handler, String uid) {
			RemoteInvokeModel rim = new RemoteInvokeModel();
			//TODO:add params for RPC
			new MyQueryTask<UserModel>(handler, rim).execute(this);
		}
	
	public void pushData2Server(final RemoteInvokeModel rim){
		Runnable run = new Runnable() {
			
			@Override
			public void run() {
				try {
					Return result = remoteService.pushData2Server(rim);
					if(result.getHead() != null && result.getHead().getRet() == RemoteServiceImpl.RETURN_CODE_SUCCESS){
						rim.setStatus(RemoteInvokeStatus.SUCCEED);
					}else{
						rim.setStatus(RemoteInvokeStatus.FAILED);
					}
				} catch (ServiceException e) {
					rim.setStatus(RemoteInvokeStatus.FAILED);
				}
				rim.setFinisheddAt(new Date());
				getDbService().updateRemoteInvoke(rim);
			}
		};
		new Thread(run).start();
	}

	public <T> Return<T> generalQuery(RemoteInvokeModel rim) {
		Return<T> result = null;
		// 1.create a new record for RIM
		rim.setPlanAt(new Date());
		getDbService().createRemoteInvoke(rim);

		try {
			// 2.1.get return value
			result = remoteService.generalQuery(rim);
			rim.setStatus(RemoteInvokeStatus.SUCCEED);
			if (result != null) {
				String json = mapper.writeValueAsString(result.getData());
				rim.setResponseBody(json);
			}

		} catch (ServiceException se) {
			rim.setStatus(RemoteInvokeStatus.FAILED);

			rim = getDbService().queryLatestRIM(rim, RemoteInvokeStatus.SUCCEED);
			if(rim != null){
			TypeReference type = new TypeReference<Return<T>>() {
			};
			try {
				// 2.2get return value
				result = mapper.readValue(rim.getResponseBody(), type);
			} catch (JsonParseException e) {
				Log.e(LOG_TAG, e.getMessage());
			} catch (JsonMappingException e) {
				Log.e(LOG_TAG, e.getMessage());
			} catch (IOException e) {
				Log.e(LOG_TAG, e.getMessage());
			}
			}
		}
		
		catch (JsonProcessingException jpe) {
			jpe.printStackTrace();
		}
		// 3.save return value into RIM
		rim.setFinisheddAt(new Date());
		getDbService().updateRemoteInvoke(rim);

		return result;
	}

	public void close() {
		if (dbService != null) {
			dbService.close();
			dbService = null;
		}
	}

	public void setURL(String url) {
		remoteService.setBaseUrl(url);
	}

	public String getURL() {
		return remoteService.getBaseUrl();
	}

}

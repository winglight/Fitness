package com.sythealth.fitness.service;

import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Type;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

import org.restlet.Client;
import org.restlet.Context;
import org.restlet.data.MediaType;
import org.restlet.data.Protocol;
import org.restlet.engine.connector.ClientConnectionHelper;
import org.restlet.ext.json.JsonRepresentation;
import org.restlet.representation.Representation;
import org.restlet.resource.ClientResource;
import org.restlet.resource.ResourceException;

import android.util.Log;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.sythealth.fitness.db.UserModel;
import com.sythealth.fitness.json.LoginToken;
import com.sythealth.fitness.json.Return;
import com.sythealth.fitness.json.ReturnHead;
import com.sythealth.fitness.json.ReturnString;
import com.sythealth.fitness.util.Des3Util;

public class RemoteServiceImpl implements IRemoteService {

	private static final String LOG_TAG = "ServiceImpl";
	public static int RETURN_CODE_SUCCESS = 0;
	public static String PRODUCT_NAME = "hc";

	private static IRemoteService service;

	private String base_url;
	private String tokenId = "";
	private String sid = "";
	private ObjectMapper mapper = new ObjectMapper();

	private RemoteServiceImpl(String url) {
		this.base_url = url;
	}

	public static IRemoteService getInstance() {
		if (service == null) {

			service = new RemoteServiceImpl("http://ws.sythealth.com/ws");
//			 service = new RemoteServiceImpl("http://192.168.0.110:8080/ws");
		}
		return service;
	}

	public boolean isLogin() {
		return tokenId != null && tokenId.length() > 0;
	}

	public <T> MessageModel<T> convert(Return<T> ret) throws ServiceException {
		if (ret.getHead().getRet() == RETURN_CODE_SUCCESS) {
			MessageModel<T> msg = new MessageModel<T>();
			msg.setFlag(true);
			msg.setMessage(ret.getHead().getMsg());
			msg.setData(ret.getData());

			return msg;
		} else {
			throw new ServiceException(ret.getHead().getRet(), ret.getHead()
					.getMsg());
		}
	}

	public <T> Return<T> convert(String org, TypeReference type,
			String url) throws ServiceException {
//		Log.d(LOG_TAG, org);
		try {
			Return<T> ret = null;
			try {
				ret = mapper.readValue(org, Return.class);
			} catch (JsonParseException e) {
				Log.e(LOG_TAG, e.getMessage());
			} catch (JsonMappingException e) {
				Log.e(LOG_TAG, e.getMessage());
			} catch (IOException e) {
				Log.e(LOG_TAG, e.getMessage());
			}

			if (ret.getHead().getRet() == ServiceException.ERROR_CODE_UNAVAILABLE_TOKENID) {
				String oldToken = (tokenId == null)?null:new String(tokenId);

				loginDirect(sid);

				if(oldToken != null && oldToken.length() > 0){
				url = url.replace(oldToken, tokenId);
				}else{
					url = url.replace("tokenid=", "tokenid=" + tokenId);
				}

				ClientResource cr = new ClientResource(url);
				org = cr.get().getText();

				try {
					ret = mapper.readValue(org, Return.class);
				} catch (JsonParseException e) {
					Log.e(LOG_TAG, e.getMessage());
				} catch (JsonMappingException e) {
					Log.e(LOG_TAG, e.getMessage());
				} catch (IOException e) {
					Log.e(LOG_TAG, e.getMessage());
				}
			}else if (ret.getHead().getRet() == ServiceException.ERROR_CODE_NO_DATA_ERROR) {
				ret.getHead().setRet(RETURN_CODE_SUCCESS);
				ret.getHead().setMsg("抱歉!没有查到符合条件的数据");
			}

			String data = Des3Util.decode(ret.getEncryptdata());
//			Log.d(LOG_TAG, data);
			Object obj = null;
			try {
				obj = mapper.readValue(data, type);
			} catch (JsonParseException e) {
				Log.e(LOG_TAG, e.getMessage());
			} catch (JsonMappingException e) {
				Log.e(LOG_TAG, e.getMessage());
			} catch (IOException e) {
				Log.e(LOG_TAG, e.getMessage());
			}
			ret.setData((T) obj);

			return ret;
		} catch (RuntimeException re) {
			re.printStackTrace();
			Return<T> ret = new Return<T>();
			ReturnHead head = new ReturnHead();
			head.setRet(1);
			head.setMsg("convert error:" + re.getMessage());
			ret.setHead(head);
			ret.setData(null);
			return ret;
		} catch (IOException e) {
			e.printStackTrace();
			Return<T> ret = new Return<T>();
			ReturnHead head = new ReturnHead();
			head.setRet(1);
			head.setMsg("convert error:" + e.getMessage());
			ret.setHead(head);
			ret.setData(null);
			return ret;
		}
	}
	
	private void addClient2CR(ClientResource cr){
		
//		Context context = new Context();
//		context.getParameters().add("socketTimeout", "15000");
//		Client client = new Client(context, Protocol.HTTP);
//
//		cr.setNext(client);
	}

	public <T> Return<T> convert(String org, TypeReference type,
			ClientResource cr, String content) throws ServiceException {
//		Log.d(LOG_TAG, org);
		try {
			Return<T> ret = null;
			try {
				ret = mapper.readValue(org, Return.class);
			} catch (JsonParseException e) {
				Log.e(LOG_TAG, e.getMessage());
			} catch (JsonMappingException e) {
				Log.e(LOG_TAG, e.getMessage());
			} catch (IOException e) {
				Log.e(LOG_TAG, e.getMessage());
			}

			if (ret.getHead().getRet() == ServiceException.ERROR_CODE_UNAVAILABLE_TOKENID) {
				String oldToken = (tokenId == null)?null:new String(tokenId);

				loginDirect(sid);

				if(oldToken != null){
					content = content.replace(oldToken, tokenId);
				}else{
					content = content.replace("tokenid=", "tokenid=" + tokenId);
				}
				
				Representation rep = new JsonRepresentation(content);

				org = cr.post(rep).getText();

				try {
					ret = mapper.readValue(org, Return.class);
				} catch (JsonParseException e) {
					Log.e(LOG_TAG, e.getMessage());
				} catch (JsonMappingException e) {
					Log.e(LOG_TAG, e.getMessage());
				} catch (IOException e) {
					Log.e(LOG_TAG, e.getMessage());
				}
			}else if (ret.getHead().getRet() == ServiceException.ERROR_CODE_NO_DATA_ERROR) {
				ret.getHead().setRet(RETURN_CODE_SUCCESS);
				ret.getHead().setMsg("抱歉!没有查到符合条件的数据");
			}

			String data = Des3Util.decode(ret.getEncryptdata());
//			Log.d(LOG_TAG, data);
			Object obj = null;
			try {
				obj = mapper.readValue(data, type);
			} catch (JsonParseException e) {
				Log.e(LOG_TAG, e.getMessage());
			} catch (JsonMappingException e) {
				Log.e(LOG_TAG, e.getMessage());
			} catch (IOException e) {
				Log.e(LOG_TAG, e.getMessage());
			}
			ret.setData((T) obj);

			return ret;
		} catch (RuntimeException re) {
			re.printStackTrace();
			Return<T> ret = new Return<T>();
			ReturnHead head = new ReturnHead();
			head.setRet(1);
			head.setMsg("convert error:" + re.getMessage());
			ret.setHead(head);
			ret.setData(null);
			return ret;
		} catch (IOException e) {
			e.printStackTrace();
			Return<T> ret = new Return<T>();
			ReturnHead head = new ReturnHead();
			head.setRet(1);
			head.setMsg("convert error:" + e.getMessage());
			ret.setHead(head);
			ret.setData(null);
			return ret;
		}
	}

	@Override
	public UserModel loginDirect(String sid) throws ServiceException {
		try {
			ClientResource cr = new ClientResource(base_url
					+ "/common/user/quicklogin?mobileid=" + sid
					+ "&desc=ANDROID" + "&product=" + PRODUCT_NAME);
			// Workaround for GAE servers to prevent chunk encoding
			// cr.setRequestEntityBuffering(true);
			// cr.accept();
			// cr.head(MediaType.APPLICATION_JSON);
			addClient2CR(cr);

			TypeReference type = new TypeReference<LoginToken>() {
			};

			String jsonStr = cr.get().getText();
			Return<LoginToken> ret = convert(jsonStr, type, base_url
					+ "/common/user/quicklogin?mobileid=" + sid
					+ "&desc=ANDROID" + "&product=" + PRODUCT_NAME);
			MessageModel<LoginToken> msg = convert(ret);
			if (!msg.isFlag()) {
				throw new ServiceException(
						ServiceException.ERROR_CODE_LOGIN_ERROR,
						msg.getMessage());
			} else {
				LoginToken login = msg.getData();
				tokenId = login.getTokenid();

				UserModel user = new UserModel();
				user.setSid(sid);
				// user.setForbidList(Arrays.asList(login.getForbidmodids()));

				this.sid = sid;

				return user;
			}

		} catch (ResourceException e1) {
			e1.printStackTrace();
			throw new ServiceException(e1);
		} catch (IOException e1) {
			e1.printStackTrace();
			throw new ServiceException(e1);
		} catch (RuntimeException re) {
			re.printStackTrace();
			throw new ServiceException(re);
		}
	}

	@Override
	public UserModel login(String phone, String email, String password)
			throws ServiceException {
		try {
			ClientResource cr = new ClientResource(base_url
					+ "/common/user/login?email=" + email + "&mobile=" + phone
					+ "&passwd=" + password + "&desc=ANDROID" + "product="
					+ PRODUCT_NAME);
			// Workaround for GAE servers to prevent chunk encoding
			cr.setRequestEntityBuffering(true);
			// cr.accept(MediaType.APPLICATION_JSON);
			// cr.head(MediaType.APPLICATION_JSON);
			addClient2CR(cr);

			TypeReference type = new TypeReference<LoginToken>() {
			};

			String jsonStr = cr.get().getText();
			Return<LoginToken> ret = convert(jsonStr, type, base_url
					+ "/common/user/login?email=" + email + "&mobile=" + phone
					+ "&passwd=" + password + "&desc=ANDROID" + "product="
					+ PRODUCT_NAME);
			MessageModel<LoginToken> msg = convert(ret);
			if (!msg.isFlag()) {
				throw new ServiceException(
						ServiceException.ERROR_CODE_LOGIN_ERROR,
						msg.getMessage());
			} else {
			LoginToken login = msg.getData();
			tokenId = login.getTokenid();

			UserModel user = new UserModel();

			return user;
			}

		} catch (ResourceException e1) {
			e1.printStackTrace();
			throw new ServiceException(e1);
		} catch (IOException e1) {
			e1.printStackTrace();
			throw new ServiceException(e1);
		}
	}

	@Override
	public MessageModel<String> forgetPassword(String phone, String email)
			throws ServiceException {
		try {
			ClientResource cr = new ClientResource(base_url
					+ "/common/user/login?email=" + email + "&mobile=" + phone
					+ "&desc=ANDROID" + "product=" + PRODUCT_NAME);
			// Workaround for GAE servers to prevent chunk encoding
			cr.setRequestEntityBuffering(true);
			// cr.accept(MediaType.APPLICATION_JSON);
			// cr.head(MediaType.APPLICATION_JSON);
			addClient2CR(cr);

			String jsonStr = cr.get().getText();
			Return<String> ret = convert(jsonStr, new TypeReference<Return>(){}, base_url
					+ "/common/user/login?email=" + email + "&mobile=" + phone
					+ "&desc=ANDROID" + "product=" + PRODUCT_NAME);
			return convert(ret);

		} catch (ResourceException e1) {
			throw new ServiceException(e1);
		} catch (IOException e1) {
			throw new ServiceException(e1);
		}
	}

	@Override
	public MessageModel<String> register(UserModel user)
			throws ServiceException {
		try {
			ClientResource cr = new ClientResource(base_url
					+ "/common/user/register?email=" + user.getEmail()
					 + "&passwd="
					+ user.getPassword() + "&mobileid=" + user.getSid());
			// Workaround for GAE servers to prevent chunk encoding
			cr.setRequestEntityBuffering(true);
			// cr.accept(MediaType.APPLICATION_JSON);
			// cr.head(MediaType.APPLICATION_JSON);
			addClient2CR(cr);

			String jsonStr = cr.get().getText();
			Return<String> ret = convert(jsonStr, new TypeReference<Return>(){},
					base_url + "/common/user/register?email=" + user.getEmail()
							+ "&passwd="
							+ user.getPassword() + "&mobileid=" + user.getSid());
			return convert(ret);

		} catch (ResourceException e1) {
			throw new ServiceException(e1);
		} catch (IOException e1) {
			throw new ServiceException(e1);
		}
	}

	@Override
	public void setBaseUrl(String url) {
		this.base_url = url;

	}

	@Override
	public String getBaseUrl() {
		return this.base_url;
	}


	private MessageModel<String> convert2(Return<ReturnString> ret) {
		MessageModel<String> msg = new MessageModel<String>();
		msg.setFlag(ret.getHead().getRet() == RETURN_CODE_SUCCESS);
		msg.setMessage(ret.getHead().getMsg());
		msg.setData(ret.getData().getString());
		return msg;
	}


	@Override
	public void setSid(String sid) {
		this.sid = sid;
	}

}
